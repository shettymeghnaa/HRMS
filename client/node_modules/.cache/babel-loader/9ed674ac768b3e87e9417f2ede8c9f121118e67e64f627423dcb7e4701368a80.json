{"ast":null,"code":"var _jsxFileName = \"/Users/shettymeghana/Desktop/HRMS/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport Dashboard from './components/Dashboard';\nimport { API_BASE_URL } from './config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [backendStatus, setBackendStatus] = useState('Loading...');\n  const [databaseStatus, setDatabaseStatus] = useState('Loading...');\n  const [testData, setTestData] = useState(null);\n  const [healthData, setHealthData] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [showLogin, setShowLogin] = useState(true);\n  useEffect(() => {\n    // Check if user is already logged in\n    const savedToken = localStorage.getItem('token');\n    const savedUser = localStorage.getItem('user');\n    if (savedToken && savedUser) {\n      // Validate token by making a test API call\n      fetch(`${API_BASE_URL}/auth/validate`, {\n        headers: {\n          'Authorization': `Bearer ${savedToken}`\n        }\n      }).then(response => {\n        if (response.ok) {\n          const userData = JSON.parse(savedUser);\n          setUser(userData);\n          setToken(savedToken);\n          setIsAuthenticated(true);\n        } else {\n          // Token is invalid, clear storage\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          setIsAuthenticated(false);\n        }\n      }).catch(error => {\n        console.error('Token validation failed:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        setIsAuthenticated(false);\n      });\n    }\n\n    // Test backend connection\n    fetch(`${API_BASE_URL}/test`).then(response => response.json()).then(data => {\n      setTestData(data);\n      setBackendStatus('Connected ✅');\n    }).catch(error => {\n      console.error('Backend connection failed:', error);\n      setBackendStatus('Failed ❌');\n    });\n\n    // Test health endpoint (includes database status)\n    fetch(`${API_BASE_URL}/health`).then(response => response.json()).then(data => {\n      setHealthData(data);\n      setDatabaseStatus(data.database === 'connected' ? 'Connected ✅' : 'Disconnected ❌');\n    }).catch(error => {\n      console.error('Health check failed:', error);\n      setDatabaseStatus('Failed ❌');\n    });\n  }, []);\n  const handleLogin = (userData, userToken) => {\n    setUser(userData);\n    setToken(userToken);\n    setIsAuthenticated(true);\n  };\n  const handleRegister = (userData, userToken) => {\n    setUser(userData);\n    setToken(userToken);\n    setIsAuthenticated(true);\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n    setToken(null);\n    setIsAuthenticated(false);\n  };\n\n  // Global API response handler for 401 errors\n  useEffect(() => {\n    const originalFetch = window.fetch;\n    window.fetch = function (...args) {\n      return originalFetch.apply(this, args).then(response => {\n        if (response.status === 401 && isAuthenticated) {\n          // Token expired or invalid, logout user\n          handleLogout();\n        }\n        return response;\n      });\n    };\n    return () => {\n      window.fetch = originalFetch;\n    };\n  }, [isAuthenticated]);\n\n  // Show authentication forms if not authenticated\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: showLogin ? /*#__PURE__*/_jsxDEV(Login, {\n        onLogin: handleLogin,\n        onSwitchToRegister: () => setShowLogin(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Register, {\n        onRegister: handleRegister,\n        onSwitchToLogin: () => setShowLogin(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Show dashboard if authenticated\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Dashboard, {\n      user: user,\n      onLogout: handleLogout,\n      token: token\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dzyviYjvLI97a+p9S8gXnyBxSm0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Login","Register","Dashboard","API_BASE_URL","jsxDEV","_jsxDEV","App","_s","backendStatus","setBackendStatus","databaseStatus","setDatabaseStatus","testData","setTestData","healthData","setHealthData","isAuthenticated","setIsAuthenticated","user","setUser","token","setToken","showLogin","setShowLogin","savedToken","localStorage","getItem","savedUser","fetch","headers","then","response","ok","userData","JSON","parse","removeItem","catch","error","console","json","data","database","handleLogin","userToken","handleRegister","handleLogout","originalFetch","window","args","apply","status","className","children","onLogin","onSwitchToRegister","fileName","_jsxFileName","lineNumber","columnNumber","onRegister","onSwitchToLogin","onLogout","_c","$RefreshReg$"],"sources":["/Users/shettymeghana/Desktop/HRMS/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport Dashboard from './components/Dashboard';\nimport { API_BASE_URL } from './config';\n\nfunction App() {\n  const [backendStatus, setBackendStatus] = useState('Loading...');\n  const [databaseStatus, setDatabaseStatus] = useState('Loading...');\n  const [testData, setTestData] = useState(null);\n  const [healthData, setHealthData] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [showLogin, setShowLogin] = useState(true);\n\n  useEffect(() => {\n    // Check if user is already logged in\n    const savedToken = localStorage.getItem('token');\n    const savedUser = localStorage.getItem('user');\n    \n    if (savedToken && savedUser) {\n      // Validate token by making a test API call\n      fetch(`${API_BASE_URL}/auth/validate`, {\n        headers: {\n          'Authorization': `Bearer ${savedToken}`\n        }\n      })\n      .then(response => {\n        if (response.ok) {\n          const userData = JSON.parse(savedUser);\n          setUser(userData);\n          setToken(savedToken);\n          setIsAuthenticated(true);\n        } else {\n          // Token is invalid, clear storage\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          setIsAuthenticated(false);\n        }\n      })\n      .catch(error => {\n        console.error('Token validation failed:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        setIsAuthenticated(false);\n      });\n    }\n\n    // Test backend connection\n    fetch(`${API_BASE_URL}/test`)\n      .then(response => response.json())\n      .then(data => {\n        setTestData(data);\n        setBackendStatus('Connected ✅');\n      })\n      .catch(error => {\n        console.error('Backend connection failed:', error);\n        setBackendStatus('Failed ❌');\n      });\n\n    // Test health endpoint (includes database status)\n    fetch(`${API_BASE_URL}/health`)\n      .then(response => response.json())\n      .then(data => {\n        setHealthData(data);\n        setDatabaseStatus(data.database === 'connected' ? 'Connected ✅' : 'Disconnected ❌');\n      })\n      .catch(error => {\n        console.error('Health check failed:', error);\n        setDatabaseStatus('Failed ❌');\n      });\n  }, []);\n\n  const handleLogin = (userData, userToken) => {\n    setUser(userData);\n    setToken(userToken);\n    setIsAuthenticated(true);\n  };\n\n  const handleRegister = (userData, userToken) => {\n    setUser(userData);\n    setToken(userToken);\n    setIsAuthenticated(true);\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n    setToken(null);\n    setIsAuthenticated(false);\n  };\n\n  // Global API response handler for 401 errors\n  useEffect(() => {\n    const originalFetch = window.fetch;\n    window.fetch = function(...args) {\n      return originalFetch.apply(this, args).then(response => {\n        if (response.status === 401 && isAuthenticated) {\n          // Token expired or invalid, logout user\n          handleLogout();\n        }\n        return response;\n      });\n    };\n\n    return () => {\n      window.fetch = originalFetch;\n    };\n  }, [isAuthenticated]);\n\n  // Show authentication forms if not authenticated\n  if (!isAuthenticated) {\n    return (\n      <div className=\"App\">\n        {showLogin ? (\n          <Login \n            onLogin={handleLogin} \n            onSwitchToRegister={() => setShowLogin(false)} \n          />\n        ) : (\n          <Register \n            onRegister={handleRegister} \n            onSwitchToLogin={() => setShowLogin(true)} \n          />\n        )}\n      </div>\n    );\n  }\n\n  // Show dashboard if authenticated\n  return (\n    <div className=\"App\">\n      <Dashboard user={user} onLogout={handleLogout} token={token} />\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}